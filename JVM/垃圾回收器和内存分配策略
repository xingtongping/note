when
where
how

判断对象的存活
1、引用计算算法(被引用+1)：快，方便，实现简单  缺点：相互引用，释放不了
2、可达性分析    跟GC roots有关联，可作为root的对象包括：方法区类静态属性引用的对象，常量引用的对象，虚拟机栈引用的对象，本地方法栈引用的对象
理解可达性分析：判断不会消亡的对象是否有引用，无则可被回收


各种引用：
强引用：Object obj= new Object;
软引用：有用非必须，用软引用关联的对象，系统将要发生OOM之前，这些对象就会被回收，如果回收后还不足内存，就会抛出异常。
弱引用：有用非（程度比软引用更低）必须，用软引用关联的对象，只能生存到下一次垃圾回收之前，不管内存够不够，都会被回收
虚引用：幽灵引用，最弱，被垃圾回收的时候收到一个通知

举例：创建WeakReference user = new WeakReference（new User);调用GC， user = null，因为每次GC都会回收弱引用
软引用和弱引用用在内存资源紧张的情况下

 

垃圾回收算法：
1、标记清除：出现碎片
2、复制算法：分两半，一段时间移动右半段，然后清空左半段，就不会出现碎片情况，但是浪费空间
3、标记-整理算法

为什么分年轻代，老年代：因为对象生命周期不同，90%朝生夕死。
新生代使用复制算法：因为存活对象不多，移动的对象不多，而且规整
老年代使用标记或者标记整理

minor GC 和 full GC



垃圾回收器：Serial 、 Parallel Old 、  ParNew   、 Parallel Scavenge 、  CMS   、 Serial Old  、   G1 

Serial、Parallel Old  单线程、最古老、独占式（ stop the world）、成熟、单CPU   
-XX：+UseSerialGC 新生和老年都用串行回收器   
-XX：+UserParNewGC 新生代用ParNew，老年代用Serial Old
-XX：+UserParallelGC 新生代使用ParallelGC，老年代使用Serial Old

ParNew和Serial基本没区别，唯一区别就是多线程，关注停顿时间

Parallel Scavenge/Praallel Old关注吞吐量

停顿时间短适合用于交互程序，提高用户体验
关注吞吐量，后台计算任务
-XX：MaxGCPauseMills  控制最大停顿时间
-XX：GCTimeRatio 吞吐量的倒数   假设=19 允许的GC时间 1/(1+19）=5%
+XX：UseAdaptiveSizePolicy  自适应调整新生代大小，老年代大小等


CMD垃圾收集器：
标记清除算法
和用户程序并发执行，需要给用户线程留下运行的内存空间
XX：CMSInitialOccupyFraction 当老年代超过这个值的时候进行垃圾回收，当老年代增长不快，可提高该参数，提高收集效率，减少收集次数
其他参数
1、进行fullGC时进行碎片整理，默认开启
2、设置多少次fullGC后一次性压缩，默认为0，即每次都进行碎片整理


G1垃圾收集器
并行和并发,并行：多线程  并发：用户线程和垃圾回收同时进行
分代收集
标记整理和复制算法




对象优先在eden分配，minor GC
大对象直接进入老年代：很长字符串和大型数组
-XX：PretenureSizeThreshold参数默认为0，表示都在新生代分配  大于直接在老年代分配，
长期存活的对象进入老年代，默认15岁




目前所有的新生代gc都是需要STW（stop the world）的

Serial：单线程STW，复制算法
ParNew：多线程并行STW，复制算法
Parallel Scavange：多线程并行STW，吞吐量优先，复制算法
G1：多线程并发，可以精确控制STW时间，整理算法
